// Code generated by protoc-gen-go. DO NOT EDIT.
// source: defs.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	defs.proto

It has these top-level messages:
	ID
	Nothing
	Query
	SearchResult
	YouTubeResult
	YouTubeSnippet
	Thumbnail
	YouTubeID
	SearchResults
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ID struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Query struct {
	Keywords          string `protobuf:"bytes,1,opt,name=keywords" json:"keywords,omitempty"`
	MaxPages          int32  `protobuf:"varint,2,opt,name=maxPages" json:"maxPages,omitempty"`
	MaxResultsPerPage int32  `protobuf:"varint,3,opt,name=maxResultsPerPage" json:"maxResultsPerPage,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Query) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *Query) GetMaxPages() int32 {
	if m != nil {
		return m.MaxPages
	}
	return 0
}

func (m *Query) GetMaxResultsPerPage() int32 {
	if m != nil {
		return m.MaxResultsPerPage
	}
	return 0
}

type SearchResult struct {
	Index uint64           `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Items []*YouTubeResult `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	Err   string           `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchResult) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SearchResult) GetItems() []*YouTubeResult {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SearchResult) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type YouTubeResult struct {
	ItemId  *ID             `protobuf:"bytes,1,opt,name=itemId" json:"itemId,omitempty"`
	Etag    string          `protobuf:"bytes,2,opt,name=etag" json:"etag,omitempty"`
	Id      *YouTubeID      `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Kind    string          `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
	Snippet *YouTubeSnippet `protobuf:"bytes,5,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *YouTubeResult) Reset()                    { *m = YouTubeResult{} }
func (m *YouTubeResult) String() string            { return proto.CompactTextString(m) }
func (*YouTubeResult) ProtoMessage()               {}
func (*YouTubeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *YouTubeResult) GetItemId() *ID {
	if m != nil {
		return m.ItemId
	}
	return nil
}

func (m *YouTubeResult) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *YouTubeResult) GetId() *YouTubeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *YouTubeResult) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *YouTubeResult) GetSnippet() *YouTubeSnippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type YouTubeSnippet struct {
	ChannelId    string                `protobuf:"bytes,1,opt,name=channelId" json:"channelId,omitempty"`
	ChannelTitle string                `protobuf:"bytes,2,opt,name=channelTitle" json:"channelTitle,omitempty"`
	Description  string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	PublishedAt  string                `protobuf:"bytes,4,opt,name=publishedAt" json:"publishedAt,omitempty"`
	Thumbnails   map[string]*Thumbnail `protobuf:"bytes,5,rep,name=thumbnails" json:"thumbnails,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Title        string                `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
}

func (m *YouTubeSnippet) Reset()                    { *m = YouTubeSnippet{} }
func (m *YouTubeSnippet) String() string            { return proto.CompactTextString(m) }
func (*YouTubeSnippet) ProtoMessage()               {}
func (*YouTubeSnippet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *YouTubeSnippet) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *YouTubeSnippet) GetChannelTitle() string {
	if m != nil {
		return m.ChannelTitle
	}
	return ""
}

func (m *YouTubeSnippet) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *YouTubeSnippet) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *YouTubeSnippet) GetThumbnails() map[string]*Thumbnail {
	if m != nil {
		return m.Thumbnails
	}
	return nil
}

func (m *YouTubeSnippet) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Thumbnail struct {
	Height int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Width  int64  `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *Thumbnail) Reset()                    { *m = Thumbnail{} }
func (m *Thumbnail) String() string            { return proto.CompactTextString(m) }
func (*Thumbnail) ProtoMessage()               {}
func (*Thumbnail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Thumbnail) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Thumbnail) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Thumbnail) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type YouTubeID struct {
	Kind       string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	VideoId    string `protobuf:"bytes,2,opt,name=videoId" json:"videoId,omitempty"`
	PlaylistId string `protobuf:"bytes,3,opt,name=playlistId" json:"playlistId,omitempty"`
}

func (m *YouTubeID) Reset()                    { *m = YouTubeID{} }
func (m *YouTubeID) String() string            { return proto.CompactTextString(m) }
func (*YouTubeID) ProtoMessage()               {}
func (*YouTubeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *YouTubeID) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *YouTubeID) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

func (m *YouTubeID) GetPlaylistId() string {
	if m != nil {
		return m.PlaylistId
	}
	return ""
}

type SearchResults struct {
	Results []*SearchResult `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
}

func (m *SearchResults) Reset()                    { *m = SearchResults{} }
func (m *SearchResults) String() string            { return proto.CompactTextString(m) }
func (*SearchResults) ProtoMessage()               {}
func (*SearchResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SearchResults) GetResults() []*SearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*ID)(nil), "rpc.ID")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
	proto.RegisterType((*Query)(nil), "rpc.Query")
	proto.RegisterType((*SearchResult)(nil), "rpc.SearchResult")
	proto.RegisterType((*YouTubeResult)(nil), "rpc.YouTubeResult")
	proto.RegisterType((*YouTubeSnippet)(nil), "rpc.YouTubeSnippet")
	proto.RegisterType((*Thumbnail)(nil), "rpc.thumbnail")
	proto.RegisterType((*YouTubeID)(nil), "rpc.YouTubeID")
	proto.RegisterType((*SearchResults)(nil), "rpc.SearchResults")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GenID service

type GenIDClient interface {
	NewID(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ID, error)
}

type genIDClient struct {
	cc *grpc.ClientConn
}

func NewGenIDClient(cc *grpc.ClientConn) GenIDClient {
	return &genIDClient{cc}
}

func (c *genIDClient) NewID(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/rpc.GenID/NewID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GenID service

type GenIDServer interface {
	NewID(context.Context, *Nothing) (*ID, error)
}

func RegisterGenIDServer(s *grpc.Server, srv GenIDServer) {
	s.RegisterService(&_GenID_serviceDesc, srv)
}

func _GenID_NewID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenIDServer).NewID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GenID/NewID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenIDServer).NewID(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

var _GenID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.GenID",
	HandlerType: (*GenIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewID",
			Handler:    _GenID_NewID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "defs.proto",
}

// Client API for Search service

type SearchClient interface {
	SearchIt(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResults, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SearchIt(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResults, error) {
	out := new(SearchResults)
	err := grpc.Invoke(ctx, "/rpc.Search/SearchIt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Search service

type SearchServer interface {
	SearchIt(context.Context, *Query) (*SearchResults, error)
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_SearchIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/SearchIt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchIt(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchIt",
			Handler:    _Search_SearchIt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "defs.proto",
}

func init() { proto.RegisterFile("defs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x5e, 0x92, 0xa5, 0x5d, 0x4e, 0xb7, 0xc1, 0x0e, 0x08, 0x45, 0x15, 0x1a, 0x95, 0xe1, 0xa2,
	0x88, 0xd1, 0x8b, 0x22, 0x21, 0x84, 0xb8, 0x41, 0x14, 0xa1, 0x08, 0x31, 0x0d, 0x6f, 0x37, 0xbb,
	0x23, 0xad, 0x4d, 0x63, 0x2d, 0x4d, 0x22, 0xdb, 0xd9, 0xd6, 0x27, 0xe2, 0x35, 0x78, 0x34, 0x64,
	0xc7, 0x09, 0x19, 0xe3, 0xee, 0x7c, 0x9f, 0xbf, 0xf3, 0x7f, 0x12, 0x00, 0xc6, 0x7f, 0xaa, 0x59,
	0x25, 0x4b, 0x5d, 0x62, 0x20, 0xab, 0x15, 0x19, 0x83, 0x9f, 0x2c, 0xf0, 0x31, 0x84, 0xd7, 0x69,
	0x5e, 0xf3, 0xd8, 0x9b, 0x78, 0xd3, 0x88, 0x36, 0x80, 0x44, 0x30, 0x3c, 0x2d, 0x75, 0x26, 0x8a,
	0x35, 0xd9, 0x40, 0xf8, 0xbd, 0xe6, 0x72, 0x8b, 0x63, 0xd8, 0xbb, 0xe2, 0xdb, 0x9b, 0x52, 0x32,
	0xe5, 0xc4, 0x1d, 0x36, 0x6f, 0x9b, 0xf4, 0xf6, 0x2c, 0x5d, 0x73, 0x15, 0xfb, 0x13, 0x6f, 0x1a,
	0xd2, 0x0e, 0xe3, 0x09, 0x1c, 0x6d, 0xd2, 0x5b, 0xca, 0x55, 0x9d, 0x6b, 0x75, 0xc6, 0xa5, 0x61,
	0xe3, 0xc0, 0x8a, 0xee, 0x3f, 0x90, 0x1f, 0xb0, 0x7f, 0xce, 0x53, 0xb9, 0xca, 0x1a, 0xde, 0xd4,
	0x27, 0x0a, 0xc6, 0x6f, 0x6d, 0xca, 0x5d, 0xda, 0x00, 0x9c, 0x42, 0x28, 0x34, 0xdf, 0x98, 0x64,
	0xc1, 0x74, 0x34, 0xc7, 0x99, 0xac, 0x56, 0xb3, 0xcb, 0xb2, 0xbe, 0xa8, 0x97, 0xbc, 0x71, 0xa4,
	0x8d, 0x00, 0x1f, 0x42, 0xc0, 0xa5, 0xb4, 0xf9, 0x22, 0x6a, 0x4c, 0xf2, 0xcb, 0x83, 0x83, 0x3b,
	0x52, 0x7c, 0x06, 0x03, 0x23, 0x4e, 0x98, 0x4d, 0x32, 0x9a, 0x0f, 0x6d, 0xb8, 0x64, 0x41, 0x1d,
	0x8d, 0x08, 0xbb, 0x5c, 0xa7, 0x6b, 0xdb, 0x5a, 0x44, 0xad, 0x8d, 0xc7, 0xe0, 0x0b, 0x66, 0xe3,
	0x8e, 0xe6, 0x87, 0xfd, 0xfc, 0xc9, 0x82, 0xfa, 0xc2, 0xfa, 0x5c, 0x89, 0x82, 0xc5, 0xbb, 0x8d,
	0x8f, 0xb1, 0xf1, 0x35, 0x0c, 0x55, 0x21, 0xaa, 0x8a, 0xeb, 0x38, 0xb4, 0x8e, 0x8f, 0xfa, 0x8e,
	0xe7, 0xcd, 0x13, 0x6d, 0x35, 0xe4, 0xb7, 0x0f, 0x87, 0x77, 0xdf, 0xf0, 0x29, 0x44, 0xab, 0x2c,
	0x2d, 0x0a, 0x9e, 0xbb, 0x6a, 0x23, 0xfa, 0x97, 0x40, 0x02, 0xfb, 0x0e, 0x5c, 0x08, 0x9d, 0x73,
	0x57, 0xef, 0x1d, 0x0e, 0x27, 0x30, 0x62, 0x5c, 0xad, 0xa4, 0xa8, 0xb4, 0x28, 0x0b, 0x37, 0x98,
	0x3e, 0x65, 0x14, 0x55, 0xbd, 0xcc, 0x85, 0xca, 0x38, 0xfb, 0xa8, 0x5d, 0x03, 0x7d, 0x0a, 0x3f,
	0x01, 0xe8, 0xac, 0xde, 0x2c, 0x8b, 0x54, 0xe4, 0x2a, 0x0e, 0xed, 0x0e, 0x9e, 0xff, 0xa7, 0x95,
	0xd9, 0x45, 0xa7, 0xfa, 0x5c, 0x68, 0xb9, 0xa5, 0x3d, 0x37, 0xb3, 0x59, 0x6d, 0xab, 0x1c, 0x34,
	0x97, 0x67, 0xc1, 0xf8, 0x1b, 0x3c, 0xf8, 0xc7, 0xc9, 0xac, 0xf0, 0x8a, 0x6f, 0x5d, 0xb7, 0xc6,
	0xc4, 0x17, 0xed, 0xd1, 0xfa, 0xbd, 0xf1, 0x77, 0xa1, 0xdd, 0x11, 0xbf, 0xf7, 0xdf, 0x79, 0xe4,
	0x2b, 0x44, 0x1d, 0x8f, 0x4f, 0x60, 0x90, 0x71, 0xb1, 0xce, 0xb4, 0x8d, 0x15, 0x50, 0x87, 0x4c,
	0x25, 0x37, 0x82, 0xe9, 0xcc, 0x86, 0x0b, 0x68, 0x03, 0x4c, 0xda, 0x5a, 0xe6, 0xed, 0xe5, 0xd4,
	0x32, 0x27, 0x97, 0x10, 0x75, 0x3b, 0xee, 0xf6, 0xeb, 0xf5, 0xf6, 0x1b, 0xc3, 0xf0, 0x5a, 0x30,
	0x5e, 0x26, 0xcc, 0x8d, 0xbe, 0x85, 0x78, 0x0c, 0x50, 0xe5, 0xe9, 0x36, 0x17, 0x4a, 0x27, 0xcc,
	0xc5, 0xec, 0x31, 0xe4, 0x03, 0x1c, 0xf4, 0xcf, 0x5e, 0xe1, 0x2b, 0x18, 0x3a, 0x33, 0xf6, 0xec,
	0x7c, 0x8f, 0x6c, 0x93, 0x7d, 0x11, 0x6d, 0x15, 0xf3, 0x97, 0x10, 0x7e, 0xe1, 0x45, 0xb2, 0xc0,
	0x09, 0x84, 0xa7, 0xfc, 0x26, 0x59, 0xe0, 0xbe, 0x55, 0xbb, 0x6f, 0x78, 0xdc, 0x1e, 0x34, 0xd9,
	0x99, 0xbf, 0x85, 0x41, 0x13, 0x03, 0x4f, 0x60, 0xaf, 0xb1, 0x12, 0x8d, 0x60, 0x05, 0xf6, 0x3b,
	0x1f, 0xe3, 0xbd, 0x44, 0x8a, 0xec, 0x2c, 0x07, 0xf6, 0xcf, 0xf1, 0xe6, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe9, 0x54, 0x6d, 0x23, 0x47, 0x04, 0x00, 0x00,
}
